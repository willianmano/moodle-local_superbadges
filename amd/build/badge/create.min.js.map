{"version":3,"file":"create.min.js","sources":["../../src/badge/create.js"],"sourcesContent":["define([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'local_superbadges/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n\n        var Create = function(selector, contextid, course) {\n            this.contextid = contextid;\n\n            this.course = course;\n\n            this.init(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        Create.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        Create.prototype.contextid = -1;\n\n        /**\n         * @var {int} course\n         * @private\n         */\n        Create.prototype.course = -1;\n\n        Create.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('createbadge', 'local_superbadges').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({course: this.course}),\n                    large: true\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({course: this.course}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        Create.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('local_superbadges', 'badge_form', this.contextid, params);\n        };\n\n        Create.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function () {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            var item = JSON.parse(data.data);\n\n            var tableLine = $('<tr>' +\n                '<th scope=\"row\">' + item.id + '</th>' +\n                '<td>' + item.name + '</td>' +\n                '<td style=\"width: 200px; text-align: center;\">' +\n                '<a href=\"#\" data-id=\"' + item.id + '\" class=\"btn btn-info btn-sm deliver-badge\">' +\n                '<i class=\"fa fa-paper-plane-o\"></i>' +\n                '</a> ' +\n                '<a href=\"' + Config.wwwroot + '/local/superbadges/requirements.php?id=' +\n                    item.id + '\" data-id=\"' + item.id + '\" ' +\n                'class=\"btn btn-primary btn-sm\"><i class=\"fa fa-list\"></i></a>' +\n                '</a> ' +\n                '<a href=\"#\" data-id=\"' + item.id + '\" data-name=\"' + item.name + '\"' +\n                'data-courseid=\"' + item.courseid + '\" data-badgeid=\"' + item.badgeid + '\"' +\n                'class=\"btn btn-warning btn-sm edit-badge\">' +\n                '<i class=\"fa fa-pencil-square-o text-white\"></i>' +\n                '</a> ' +\n                '<a href=\"#\" data-id=\"' + item.id + '\" class=\"btn btn-danger btn-sm delete-badge\">' +\n                '<i class=\"fa fa-trash-o\"></i>' +\n                '</a> ' +\n                '</td>' +\n                '</tr>');\n\n            tableLine\n                .appendTo('.table-badges tbody')\n                .hide().fadeIn('normal');\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        Create.prototype.handleFormSubmissionFailure = function (data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        Create.prototype.submitFormAjax = function (e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function (index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_superbadges_createbadge',\n                args: {contextid: this.contextid, course: this.course, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        Create.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid, course) {\n                return new Create(selector, contextid, course);\n            }\n        };\n    }\n);\n"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","Create","selector","contextid","course","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","large","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","hide","use","M","core_formchangechecker","reset_form_dirty_state","item","parse","id","name","wwwroot","courseid","badgeid","appendTo","fadeIn","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","preventDefault","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"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"}